// ==========================================================================
// Mixins
// ==========================================================================

// Text Color
@mixin text-color {
  @if not (background-color == $white) {
    color: palette(general, text, light);
  }
}


// Colours & make dark
@mixin dark-colour($property, $palette, $catagory, $shade: base) {
  #{$property}: palette($palette, $catagory, $shade, base);
  &:hover, &:active {
    #{$property}: palette($palette, $catagory, $shade, dark);
  }
}

// Section Box-Shadows
@mixin box-shadow {
  box-shadow: 0 0 5px 3px palette(general, box-shadow);
}

// Media queries
@mixin mq($break) {
  @if $break == 's' {
    @media (min-width: $break-small) {
      @content;
    }
  }
  @else if $break == 'm' {
    @media (min-width: $break-medium) {
      @content;
    }
  }
  @else if $break == 'l' {
    @media (min-width: $break-large) {
      @content;
    }
  }
  @else if $break == 'xl' {
    @media (min-width: $break-extra-large) {
      @content;
    }
  }
  @else {
    @error "Break-point #{$break} does not exist, check spelling and remember format is like: 's' or 'xl'.";
  }
}

// Hover effects
@mixin hover-lift {
  position: relative;
  top: 0;
  transition: .5s ease;
  &:hover {
    top: -10px;
    transition: .5s ease;
  }
}

// Generate modifier color classes


// Generating :before or :after pseudo-element shapes


// Image replacement

      
// Adjacent sibling margins


// Grid Columns
@mixin g-columns($max-width) {
  @for $i from 1 through $g-col-count {
    // Calulate all gutters combined
    $gutters: ($g-gutter-width * ($g-col-count - 1));
    // calculate a standard column width based on max width defined in config and column count.
    $col-width: (($max-width - $gutters)/ $g-col-count);
    // calculate target size for each column value.
    $cur-width: (($col-width * $i) + ($g-gutter-width * ($i - 1)));
    // Generate column modifier classes
    &--#{($i)} {
      // take the target size and make it a percentage based on full width.
      width: percentage($cur-width/$max-width);
    }
  }
}        

// General Mixin for all services
@mixin services-modifiers($color-primary, $color-secondary, $color-accent) {
  .module-services-icon {
    background-color: $color-primary;
  }
  .nav-item-expand {
    background-color: $color-secondary;
  }
  .btn-readmore {
    background-color: $color-accent;
  }
  .nav-item-icon {
    color: $color-primary;
  }
  .nav-item-expand-accent-arrow {
    border-top: 30px solid $color-primary;
  }
  &:hover {
    background-color: $color-primary;
    .module-services-title, .module-services-description {
      color: palette(general, text, light);
    }
    .btn-readmore, .module-services-icon {
      background-color: palette(general, text, light);
      color: $color-primary;
    }
  }
}
// Uses Mixin above and sets the custom colours to the mixin.
@mixin services{
  &bespoke-software {
    // Colours for Bespoke Software
    $color-primary: palette(services, software);
    $color-secondary: palette(services, software, base, dark);
    $color-accent: palette(services, software, alt);
    @include services-modifiers($color-primary, $color-secondary, $color-accent);
    .nav-item-expand-accent-arrow {
      grid-column: 1 / span 1;
    }
  }

  &it-support {
    // Colours
    $color-primary: palette(services, it-support);
    $color-secondary: palette(services, it-support, base, dark);
    @include services-modifiers($color-primary, $color-secondary, $color-primary);
    .nav-item-expand-accent-arrow {
      grid-column: 2 / span 1;
    }
  }

  &digital-marketing {
    $color-primary: palette(services, marketing);
    $color-secondary: palette(services, marketing, base, dark);
    @include services-modifiers($color-primary, $color-secondary, $color-primary);
    .nav-item-expand-accent-arrow {
      grid-column: 3 / span 1;
    }
  }

  &telecoms-services {
    $color-primary: palette(services, telecoms);
    $color-secondary: palette(services, telecoms, base, dark);
    @include services-modifiers($color-primary, $color-secondary, $color-primary);
    .nav-item-expand-accent-arrow {
      grid-column: 4 / span 1;
    }
  }

  &web-design {
    $color-primary: palette(services, web-design);
    $color-secondary: palette(services, web-design, base, dark);
    @include services-modifiers($color-primary, $color-secondary, $color-primary);
    .nav-item-expand-accent-arrow {
      grid-column: 5 / span 1;
    }
  }

  &cyber-security {
    $color-primary: palette(services, security);
    $color-secondary: palette(services, security, base, dark);
    @include services-modifiers($color-primary, $color-secondary, $color-primary);
    .nav-item-expand-accent-arrow {
      grid-column: 6 / span 1;
    }
  }

  &developer-training {
    $color-primary: palette(services, training);
    $color-secondary: palette(services, training, base, dark);
    @include services-modifiers($color-primary, $color-secondary, $color-primary);
    .nav-item-expand-accent-arrow {
      grid-column: 7 / span 1;
    }
  }
}